<?php
// $Id: frontpage.module,v 1.1.2.10 2011/01/19 01:40:04 kiam Exp $

/**
 * @file
 * Allows users to set the node to use for the frontpage.
 */

/**
 * Allows to access the Drupal variables used by the module.
 */
class FrontpageVars extends Vars {
  /**
   * Constructs a FrontpageVars object.
   */
  public function __construct() {
    parent::__construct('frontpage');
  }

  /**
   * Implements Vars::getDefaults().
   */
  public function getDefaults() {
    return array(
      'frontpage_content_type' => array('value' => 0, 'flags' => Vars::VARS_NODE_TYPE),
      'frontpage_old_site_frontpage' => array('value' => 'node'),
      'frontpage_anonymous_node' => array('value' => 0),
      'frontpage_authenticated_node' => array('value' => 0),
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for node_type_form().
 */
function frontpage_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['type'])) {
    $vars = new FrontpageVars();

    $form['workflow']['frontpage_content_type'] = array(
      '#type' => 'radios',
      '#title' => t('Frontpage support'),
      '#default_value' => $vars['frontpage_content_type_' . $form['#node_type']->type],
      '#options' => array(
        t('Disabled'),
        t('Enabled'),
        t('Enabled, for anonymous users'),
        t('Enabled, for authenticated users'),
      ),
      '#access' => user_access('administer frontpage'),
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for system_site_information_settings().
 */
function frontpage_form_system_site_information_settings_alter(&$form, &$form_state, $form_id) {
  unset($form['front_page']['site_frontpage']);

  $form['front_page']['site_frontpage']['#type'] = 'value';
  $form['front_page']['site_frontpage']['#value'] = 'frontpage';
}

/**
 * Implements hook_help().
 */
function frontpage_help($path, $arg) {
  if ($path == 'admin/help#frontpage') {
    return '<p>' . t("The Frontpage module allows users with the right permission to select the node that will be used as frontpage for anonymous, and authenticated users. The module restricts the users who can edit the node set as frontpage."
    ) . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function frontpage_menu() {
  $items = array();

  $items['frontpage/set/anonymous/%node'] = array(
    'title' => 'Set the frontpage',
    'page callback' => 'frontpage_set',
    'page arguments' => array(3, 'anonymous', 'true'),
    'access arguments' => array('set anonymous frontpage'),
    'type' => MENU_CALLBACK,
  );

  $items['frontpage/set/authenticated/%node'] = array(
    'title' => 'Set the frontpage',
    'page callback' => 'frontpage_set',
    'page arguments' => array(3, 'authenticated', 'true'),
    'access arguments' => array('set authenticated frontpage'),
    'type' => MENU_CALLBACK,
  );

  $items['frontpage'] = array(
    'page callback' => 'frontpage_view',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_node_access().
 */
function frontpage_node_access($node, $op, $account) {
  $vars = new FrontpageVars();
  $rights = &$vars->staticValue(__FUNCTION__, array());

  if ($op == 'update' && !is_string($node)) {
    if (isset($rights[$node->nid][$account->uid])) {
      return $rights[$node->nid][$account->uid];
    }

    // node_access() does not invoke hook_node_access() if the user has the
    // 'bypass node access' permission, or doesn't have the
    // 'access content' permission; it is useless to check those permissions.
    if ($vars['frontpage_anonymous_node'] == $node->nid) {
      $bool = (user_access('bypass node access', $account) || user_access('edit frontpage', $account));
      $result = $bool ? NODE_ACCESS_ALLOW : NODE_ACCESS_DENY;
    }
    elseif ($vars['frontpage_authenticated_node'] == $node->nid) {
      $bool = (user_access('bypass node access', $account) || user_access('edit frontpage', $account));
      $result = $bool ? NODE_ACCESS_ALLOW : NODE_ACCESS_DENY;
    }
    else {
      $result = NODE_ACCESS_IGNORE;
    }

    $rights[$node->nid][$account->uid] = $result;
  }
  else {
    $result = NODE_ACCESS_IGNORE;
  }

  return $result;
}

/**
 * Implements hook_node_operations().
 */
function frontpage_node_operations() {
  $operations = array();

  $bool = (
    user_access('bypass node access') ||
    user_access('set frontpage')
  );
  if ($bool) {
    $operations['anonymous_frontpage'] = array(
      'label' => t('Set as anonymous frontpage'),
      'callback' => 'frontpage_set',
      'callback arguments' => array('type' => 'anonymous'),
    );
    $operations['authenticated_frontpage'] = array(
      'label' => t('Set as authenticated frontpage'),
      'callback' => 'frontpage_set',
      'callback arguments' => array('type' => 'authenticated'),
    );
  }

  return $operations;
}

/**
 * Implements hook_node_view().
 */
function frontpage_node_view($node, $view_mode, $langcode) {
  $links = array();
  $vars = new FrontpageVars();

  if ($view_mode == 'full' && node_is_page($node)) {
    $bool = (
      ($vars['frontpage_content_type_' . $node->type] == 1) ||
      ($vars['frontpage_content_type_' . $node->type] == 2)
    ) && (
      (
        user_access('set frontpage') ||
        user_access('bypass node access')
      ) &&
      ($vars['frontpage_anonymous_node'] != $node->nid)
    );
    if ($bool) {
      $links['frontpage_set_anonymous_node'] = array(
        'title' => t('Set as anonymous frontpage'),
        'href' => 'frontpage/set/anonymous/' . $node->nid,
        'query' => drupal_get_destination(),
      );
    }

    $bool = (
      ($vars['frontpage_content_type_' . $node->type] == 1) ||
      ($vars['frontpage_content_type_' . $node->type] == 3)
    ) && (
      (
        user_access('set frontpage') ||
        user_access('bypass node access')
      ) &&
      ($vars['frontpage_authenticated_node'] != $node->nid)
    );
    if ($bool) {
      $links['frontpage_set_authenticated_node'] = array(
        'title' => t('Set as authenticated frontpage'),
        'href' => 'frontpage/set/authenticated/' . $node->nid,
        'query' => drupal_get_destination(),
      );
    }
  }

  if (!empty($links)) {
    $node->content['links']['frontpage'] = array(
      '#theme' => 'links__node__frontpage',
      '#links' => $links,
      '#attributes' => array('class' => array('links', 'inline')),
    );
  }
}

/**
 * Implements hook_permission().
 */
function frontpage_permission() {
  return array(
    'administer frontpage' =>  array(
      'title' => t('Administer the frontpage settings'),
    ),
    'set frontpage' =>  array(
      'title' => t('Set the frontpage node'),
      'description' => t('Set the node that is used as frontpage.'),
    ),
    'edit frontpage' =>  array(
      'title' => t('Edit the frontpage node'),
      'description' => t('Edit the node that is used as frontpage.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function frontpage_theme() {
  return array(
    'frontpage' => array(
      'render element' => 'elements',
      'template' => 'frontpage',
    )
  );
}

/**
 * Menu callback; shows the frontpage node.
 */
function frontpage_view() {
  $langcode = $GLOBALS['language_content']->language;
  $logged_in = user_is_logged_in();
  $type = 'node';
  $vars = new FrontpageVars();
  $view_mode = 'full';

  $context = array('logged in' => $logged_in);
  $nid = $logged_in ? $vars['frontpage_authenticated_node'] : $vars['frontpage_anonymous_node'];

  if ($nid && ($node = node_load($nid))) {
    $uri = entity_uri('node', $node);

    drupal_add_html_head_link(array('rel' => 'canonical', 'href' => url($uri['path'], $uri['options'])), TRUE);
    drupal_add_html_head_link(array('rel' => 'shortlink', 'href' => url($uri['path'], array_merge($uri['options'], array('alias' => TRUE)))), TRUE);

    node_build_content($node, $view_mode, $langcode);

    $build = $node->content;
    unset($node->content);

    $build += array(
      '#theme' => 'frontpage',
      '#node' => $node,
      '#view_mode' => $view_mode,
      '#language' => $langcode,
    );

    // Allow modules to modify the structured node.
    drupal_alter(array('node_view', 'entity_view'), $build, $type);
    drupal_alter('frontpage_view', $build, $context);

    return $build;
  }

  $redirect = $vars['frontpage_old_site_frontpage'];
  // Allow modules to modify where users are redirected.
  drupal_alter('frontpage_redirect', $redirect, $context);
  drupal_goto($redirect);
}

/**
 * Processes variables for frontpage.tpl.php
 *
 * The $variables array contains the following arguments:
 * - $node
 * - $view_mode
 * - $page
 *
 * @see frontpage.tpl.php
 */
function template_preprocess_frontpage(&$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  // Provide a distinct $teaser boolean.
  $variables['teaser'] = $variables['view_mode'] == 'teaser';
  $variables['node'] = $variables['elements']['#node'];
  $node = $variables['node'];

  $uri = entity_uri('node', $node);
  $variables['node_url']  = url($uri['path'], $uri['options']);
  $variables['title']     = check_plain($node->title);
  $variables['page']      = $variables['view_mode'] == 'full' && node_is_page($node);

  // Flatten the node object's member fields.
  $variables = array_merge((array) $node, $variables);

  // Helpful $content variable for templates.
  foreach (element_children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  // Make the field variables available with the appropriate language.
  field_attach_preprocess('node', $node, $variables['content'], $variables);

  $variables['display_submitted'] = FALSE;
  $variables['submitted'] = '';
  $variables['user_picture'] = '';

  // Gather node classes.
  $variables['classes_array'][] = drupal_html_class('node-' . $node->type);
  $variables['classes_array'][] = drupal_html_class('frontpage-' . $node->type);

  // Clean up name so there are no underscores.
  $variables['theme_hook_suggestions'][] = 'node__' . $node->type;
  $variables['theme_hook_suggestions'][] = 'node__' . $node->nid;
  $variables['theme_hook_suggestions'][] = 'frontpage__' . $node->type;
  $variables['theme_hook_suggestions'][] = 'frontpage__' . $node->nid;

  // Adds RDFa markup to the node container. The about attribute specifies the
  // URI of the resource described within the HTML element, while the @typeof
  // attribute indicates its RDF type (e.g., foaf:Document, sioc:Person, and so
  // on.)
  $variables['attributes_array']['about'] = empty($variables['node_url']) ? NULL : $variables['node_url'];
  $variables['attributes_array']['typeof'] = empty($node->rdf_mapping['rdftype']) ? NULL : $node->rdf_mapping['rdftype'];

  // Adds RDFa markup to the title of the node. Because the RDFa markup is
  // added to the <h2> tag which might contain HTML code, we specify an empty
  // datatype to ensure the value of the title read by the RDFa parsers is a
  // literal.
  $variables['title_attributes_array']['property'] = empty($node->rdf_mapping['title']['predicates']) ? NULL : $node->rdf_mapping['title']['predicates'];
  $variables['title_attributes_array']['datatype'] = '';

  if (!user_access('edit frontpage')) {
    $element = array(
      '#tag' => 'meta',
      '#attributes' => array(
        'content' => $variables['title'],
        'about' => $variables['node_url'],
      ),
    );

    if (!empty($node->rdf_mapping['title']['predicates'])) {
      $element['#attributes']['property'] = $node->rdf_mapping['title']['predicates'];
    }

    drupal_add_html_head($element, 'frontpage_title');
  }

  $bool = (
    isset($node->comment_count) &&
    !empty($node->rdf_mapping['comment_count']['predicates']) &&
    user_access('access comments')
  );
  if ($bool) {
    $element = array(
      '#tag' => 'meta',
      '#attributes' => array(
        'about' => $variables['node_url'],
        'property' => $node->rdf_mapping['comment_count']['predicates'],
        'content' => $node->comment_count,
        'datatype' => $node->rdf_mapping['comment_count']['datatype'],
      ),
    );
    drupal_add_html_head($element, 'frontpage_comment_count');
  }
}

/**
 * Sets the node as frontpage.
 *
 * @param $node
 *   The node to set as frontpage. The function accepts also an array of nodes,
 *   but only the first node will be set as frontpage.
 * @param $type
 *   A string that can be set to 'anonymous', or 'authenticated'.
 * @param $goto
 *   When it is not FALSE, the function will redirect the user.
 */
function frontpage_set($node, $type, $goto = FALSE) {
  $frontpage = is_array($node) ? $node[0] : $node;
  $vars = new FrontpageVars();
  $vars["frontpage_{$type}_node"] = $frontpage->nid;

  if ($goto) {
    drupal_goto('', array('query' => drupal_get_destination()));
  }
}
